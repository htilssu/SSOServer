// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["tracing"]
}

model Account {
  id          String   @id @default(cuid()) @map("_id")
  email       String
  password    String
  userId      String?
  accountType String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User?    @relation(fields: [userId], references: [id])
  Partner     Partner? @relation(fields: [partnerId], references: [id])
  partnerId   String?

  @@unique([email, accountType])
}

model Role {
  id          String     @id @default(cuid()) @map("_id")
  name        String     @unique
  description String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  UserRole    UserRole[]
}

model UserRole {
  id        String   @id @default(cuid()) @map("_id")
  User      User     @relation(fields: [userId], references: [id])
  Role      Role     @relation(fields: [roleId], references: [id])
  userId    String
  roleId    String
  createdAt DateTime @default(now())

  @@unique([userId, roleId])
}

model User {
  id          String     @id @default(cuid()) @map("_id")
  firstName   String
  lastName    String
  avatar      String?
  dob         DateTime
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  username    String?
  phoneNumber String?
  metadata    Json?
  Account     Account[]
  UserRole    UserRole[]

  @@index([username])
  @@index([phoneNumber])
}

model Partner {
  id             String           @id @default(cuid()) @map("_id")
  phoneNumber    String?
  name           String?
  apiKeys        String[]
  address        String?
  avatar         String?
  metadata       Json?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  Account        Account[]
  PartnerService PartnerService[]
  Service        Service[]
}

model Service {
  id             String           @id @default(cuid()) @map("_id")
  name           String
  shortId        String?
  description    String
  metadata       Json?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  website        String?
  PartnerService PartnerService[]
  partnerId      String?
  Owner          Partner?         @relation(fields: [partnerId], references: [id])

  @@index([shortId])
}

model PartnerService {
  id        String  @id @default(cuid()) @map("_id")
  Service   Service @relation(fields: [serviceId], references: [id])
  Partner   Partner @relation(fields: [partnerId], references: [id])
  partnerId String
  serviceId String
}

model TempSession {
  id        String   @id @default(cuid()) @map("_id")
  session   String
  returnUrl String?
  s         String?
  expiredAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OTP {
  id     String @id @default(cuid()) @map("_id")
  userId String
}
